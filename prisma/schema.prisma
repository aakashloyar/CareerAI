generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_URL")
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  password      String?
  emailVerified Boolean          @default(false)
  profileImage  String?
  lastLogin     DateTime?
  firstName     String?
  lastName      String?
  otps          Otp[]            @relation("UserOtps")
  coverletters  Coverletter[]    @relation("CoverLetters")
  quizs         Quiz[]           @relation("Quizs")
  @@index([email])
}

model Otp {
  id        String               @id @default(uuid())
  email     String
  sessionId String               @unique
  otp       String
  user      User                 @relation("UserOtps", fields: [email], references: [email], onDelete: Cascade)
  createdAt DateTime             @default(now())
  expiresAt DateTime
  @@unique([email, sessionId])
  @@index([email, sessionId])
}

model Coverletter {
  id              String         @id @default(cuid())
  userId          String
  name            String         @default("Default Name") 
  content         String  
  jobDescription  String
  companyName     String  
  jobTitle        String    
  status          String         @default("draft") 
  user            User           @relation("CoverLetters",fields: [userId], references: [id],onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  @@index([userId])
}

model Quiz {
  id              String         @id @default(uuid())
  userId          String  
  name            String    
  topic           String[]
  count           Int
  user            User           @relation("Quizs",fields: [userId], references: [id],onDelete: Cascade)         
  questions       Question[]     @relation("Questions")
  submissions     Submission[]   @relation("Submissions")
  createdAt       DateTime       @default(now())
  @@index([userId])
  @@index([name])
}

model Question {
  id        String                @id @default(uuid())
  quizId    String
  value     String
  type      QuestionType          @default(single)
  quiz      Quiz                  @relation("Questions", fields: [quizId], references: [id], onDelete: Cascade)
  queOpt    QueOpt[]
  @@index([quizId])
}

model Option {
  id        String                @id @default(uuid())
  value     String
  queOpt    QueOpt[]  
}

model QueOpt {
  questionId String
  optionId   String
  isCorrect  Boolean               @default(false)  

  question   Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option     Option                @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([questionId, optionId]) 
}

model Submission {
  id              String           @id @default(uuid())
  userId          String  
  quizId          String
  percentage      String
  quiz            Quiz             @relation("Submissions",fields: [quizId], references: [id],onDelete: Cascade)        
  response        Response[]       @relation("Responses")
  createdAt       DateTime         @default(now())
  sumbittedAt     DateTime?  
  @@index([userId])
}
model Response {
  id              String           @id @default(uuid())
  submissionId    String
  questionId      String   
  selection       String
  verdict         Boolean 
  submission      Submission       @relation("Responses",fields: [submissionId], references: [id],onDelete: Cascade)         
  @@index([submissionId])
}

enum QuestionType {
  single
  multi
  both
}
